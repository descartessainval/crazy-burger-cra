ctrl + P -> affiche une bar de recherche des différents fichiers du projet


en cas d'erreur de node au lancement de l'application
https://sebhastian.com/error-0308010c-digital-envelope-routines-unsupported/


LIVE AMA 

Les 4 manières d'ajouter du style à un composant
------------------------------------------------

1 -> inline style -> ajouter rapidement en mode test mais c'est SALE + priorité sur toutes les méthodes

        <h1 style={{backgroundColor: "blue", color:"white", fontSize: "15px" }}></h1>

2 -> object style -> sert les conditionnal rendering + intérêt de sépater le jsx et le css

    const titreH2Style = {
        backgroundColor: "blue", 
        color:"white", 
        fontSize: "15px"
    }

    dans la vue -> <h1 style={titreH2Style}></h1>

3 -> modules CSS(avec className) -> c'est un fichier CSS, éclater son code en plusieurs modules qu'on va rassembler via des import


4 -> Globale Style (index.css) -> c'est à peu près la même que la précédente méthodes
    Avantage: il s'applique à tout le projet 
    Désaventage: ne sera pas pioritaire par rapport à d'autre propriétés 


AUTRE METHODE -> Styled Componant -> c'est une librairie 
-> eviter les collisions css (ex: dans css, dans sass)
-> conserver l'imbrication de style | nested styling  (ex:Sass) 


Remarque c'est faux amis -> un styled components mais c'est plutot un styled tags 


a derterminer lequel est le plus adapté qu'un autre

en tant que dev on se doit de connaitre ces quatres manières

DEMONSTRATION D'ASTUCES
-----------------------
    -> cmd + shift + p -> wrap -> ce que je veux, en exmple : "div"  -> l'ensemble des éléments sélections seront encapsulés par une div

    -> html tag wrapper

    -> vscode styled component syntzax hightligting 

    -> astuce de productivité :
        - configurer sa machine
        file -> preferences -> keyboard shortcut


LE DESIGN SYTEM 
---------------

c'est ensemble de doc de réf qui va être décidé par l'équipe business, l'équipe design et l'aquipe front-end
pour définir l'identité visuelle de l'application. 


-------------------F04 -> correction

ASTUCES
-------
flex: 1; -> permet à l'enfant de s'étendre dans la place qui reste dans le parent
dasn la même optique -> height: calc(95vh - 10vh) ; calcule la taille restante entre la taille du parent et d'un/des enfant(s) 



- GIT STASH  & GIT RESET

GIT STASH  je supprime mon mon code mais je le sauvegarde/ je le planque 
        
        LES DIFF. CMD DE GIT STASH
        __________________________

        git stash list -> permet de visualiser les diff. stash dans une pile
        pour le retrouver ->  git stash apply [index | ex: stash@{1}]
       
        git stash list
       
        plutôt que de faire un simple -> git stash 
        faire/préférer une avariante avec msg de stash->  git stash save "Oubli de déplacer style vers prooduct" -> clic entrée
    
        SUITE DU PROCESS
        - ON ANNULE LE DERNIER COMMIT:
            - "git reset HEAD^" avec ses trois modes possibles:
                 --soft -> annule les commit, conserve les changement en stage 
                 --mixed -> la même mais en plus il va les unstage
                 --hard (conseiller de ne pas l'utiliser) -> supprime définitivement |PAS CONSEILLER

            - git reset  --soft HEAD^ -> si je ne mets rien par défaut ce sera 1

RAPPEL
------

HEAD* => ma position
git reset => revenir à un nombre de certains commits en arrière à partir de la où je suis

--amend => corriger/modifier le dernier commit



----------------------------ASTUCE AVANT DE PULL----------------------------
-> je crée une branche à partir de la main 
-> gc -b "F07-test" 
        --> si je fais un glo 


RAPPEL 
git fetch -> permet d'update une branche. En gros, je récupère les états de toutes les branches existantes
    si je souhaite updater la main -> git fetch origin main
    je veux intégrer les changt de la main origin dans ma branche "test" -> git rebase origin/main
                                                                            je rappatrie les changements de main origin vars la branche test 


 main origin et main local sont des branches différentes 

 pour observer une compraison dans git
 git diff main..origin/main


vérifier un rebase ?
git diff F07..origin/main


------------------------------CONTEXT && CONDITIONNAL RENDERING--------------------------------

Lorsque deux composants consomment le même state, le state sera définie 
dans le composant parent des deux composants

-> lifting state up = "faire remonter l'état"


____CONDITIONNAL RENDERING_____

Lorsque que j'ai dans une condition ternaire un null  comme ci dessous
    -> isModeAdmin ? <Admin/> :  null 
je peux simplifier l'écriture en 
    -> isModeAdmin && <Admin/>    | && est un raccourci 
        si cette expression est true &&/alors tu m'affiche le composant <Admin/>
        sinon tu ne m'affiche rien